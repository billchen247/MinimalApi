# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  version: '1.0.0.$(Build.BuildId)'  # ✅ Auto-increment with Build ID

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: Dotnet restore
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- powershell: |
    [xml]$csproj = Get-Content "path/to/project.csproj"
    $packageId = $csproj.Project.PropertyGroup.PackageId
    $packageVersion = $csproj.Project.PropertyGroup.Version

    if (-not $packageVersion) { $packageVersion = "1.0.0.$(Build.BuildId)" }  # Fallback version
    if (-not $packageId) { $packageId = "DefaultPackageName" }  # Fallback name

    $artifactFullName = "$packageId" + "_" + "$packageVersion"

    Write-Host "Package ID: $packageId"
    Write-Host "Package Version: $packageVersion"
    Write-Host "Artifact Name: $artifactFullName"

    # Set variables for later steps
    Write-Host "##vso[task.setvariable variable=artifactFullName]$artifactFullName"
  displayName: 'Extract & Print Artifact Name and Version'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

    
- task: PublishSymbols@2
  displayName: Publish symbols path
  continueOnError: True
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
    PublishSymbols: false
    SymbolServerType: TeamServices
    
- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: $(artifactFullName)  # ✅ Includes version
    TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)_$(artifactFullName)'  # ✅ Versioned target path
    

# ✅ Fix: Specify output directory for .nupkg files
- task: DotNetCoreCLI@2
  displayName: Dotnet Package
  inputs:
    command: 'pack'
    projects: '**/*.csproj'
    configuration: 'Release'
    arguments: '--output $(Build.ArtifactStagingDirectory) --property:Version=$(version)'

# ✅ Fix: Ensure .nupkg files exist before pushing
- task: NuGetCommand@2
  displayName: Push the nuget package to Feeds
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '8652216f-33ec-4cc4-912f-2fdda6d93168/ec7dd365-d6f2-4c11-a4e2-b5de5e9034c0'

